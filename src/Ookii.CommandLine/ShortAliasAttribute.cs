using System;

namespace Ookii.CommandLine;

/// <summary>
/// Defines an alternative short name for a command line argument.
/// </summary>
/// <remarks>
/// <note>
///   To specify multiple aliases, apply this attribute multiple times.
/// </note>
/// <note>
///   This attribute specifies short name aliases used with <see cref="ParsingMode.LongShort" qualifyHint="true"/>.
///   It is ignored if the <see cref="CommandLineParser.Mode" qualifyHint="true"/> property is not
///   <see cref="ParsingMode.LongShort" qualifyHint="true"/>, or if the argument doesn't have a
///   primary <see cref="CommandLineArgumentAttribute.ShortName" qualifyHint="true"/>.
/// </note>
/// <para>
///   The short aliases for a command line argument can be used instead of the regular short
///   name to specify the parameter on the command line.
/// </para>
/// <para>
///   All short argument names and short aliases defined by a single arguments type must be
///   unique.
/// </para>
/// <para>
///   By default, the command line usage help generated by <see cref="CommandLineParser.WriteUsage" qualifyHint="true"/>
///   includes the aliases. Set the <see cref="UsageWriter.IncludeAliasInDescription" qualifyHint="true"/>
///   property to <see langword="false"/> to exclude them.
/// </para>
/// </remarks>
/// <threadsafety static="true" instance="true"/>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Method, AllowMultiple = true)]
public sealed class ShortAliasAttribute : Attribute
{
    private readonly char _alias;

    /// <summary>
    /// Initializes a new instance of the <see cref="AliasAttribute"/> class.
    /// </summary>
    /// <param name="alias">The alternative short name for the command line argument.</param>
    public ShortAliasAttribute(char alias)
    {
        _alias = alias;
    }

    /// <summary>
    /// Gets the alternative short name for the command line argument.
    /// </summary>
    /// <value>
    /// The alternative short name for the command line argument.
    /// </value>
    public char Alias => _alias;
}
