<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>clargclass</Title>
      <Author>Sven Groot (Ookii.org)</Author>
      <Description>
        Snippet for creating a command line arguments class for use with Ookii.CommandLine.
      </Description>
      <HelpUrl>
        https://github.com/SvenGroot/ookii.commandline
      </HelpUrl>
      <Shortcut>clargclass</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>Name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ProgramArguments</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>Description</ID>
          <ToolTip>The application description</ToolTip>
          <Default>Application description.</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <References>
        <Reference>
          <Assembly>Ookii.CommandLine.dll</Assembly>
          <Url>https://github.com/SvenGroot/ookii.commandline</Url>
        </Reference>
      </References>
      <Imports>
        <Import>
          <Namespace>Ookii.CommandLine</Namespace>
        </Import>
        <Import>
          <Namespace>System.ComponentModel</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp"><![CDATA[// Customize the parsing behavior by changing the options.
[ParseOptions(NameTransform = NameTransform.PascalCase)]
[Description("$Description$")]
class $Name$
{
    // [CommandLineArgument(Position = 0, IsRequired = true)]
    // [Description("Argument description.")]
    // public string SampleArgument { get; set; }

    public static $Name$? Parse()
    {
        // Parse the arguments from Environment.GetCommandLineArgs().
        return CommandLineParser.Parse<$Name$>();
    }
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>